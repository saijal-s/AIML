def  uniform_cost_search(goal, start):
    global graph,cost
    answer = []
    queue = []
    answer.append(10**8)
    queue.append([0, start])
    visited = {}
    count = 0
    while (len(queue) > 0):
        queue = sorted(queue)
        p = queue[0]
        del queue[0]
        if (p[1] in goal):
            index = goal.index(p[1])
            if (answer[index] == 10**8):
                count += 1
            if (answer[index] > p[0]):
                answer[index] = p[0]
            queue = sorted(queue)
            if (count == len(goal)):
                return answer
        if (p[1] not in visited):
            for i in range(len(graph[p[1]])):
                queue.append( [(p[0] + cost[(p[1], graph[p[1]][i])]), graph[p[1]][i]])
        visited[p[1]] = 1
 
    return answer
 
if __name__ == '__main__':
     
    graph,cost = [[] for i in range(8)],{}
 
    graph[0].append(1)
    graph[0].append(3)
    graph[3].append(1)
    graph[3].append(4)
    graph[1].append(4)
    graph[1].append(2)
    graph[4].append(2)
   
    cost[(0, 1)] = 6
    cost[(0, 3)] = 1
    cost[(3, 1)] = 2
    cost[(3, 4)] = 1
    cost[(1, 2)] = 5
    cost[(1, 4)] = 2
    cost[(4, 2)] = 4
    goal = []
    end=2
    start=0
    goal.append(end)
    answer = uniform_cost_search(goal, start)
    print("Minimum cost from ",start," to",end, "is = ",answer[0])
